<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About.Summary" xml:space="preserve">
    <value>Displays information about the bot.</value>
  </data>
  <data name="About.Usage" xml:space="preserve">
    <value>about
about system
about upttime</value>
  </data>
  <data name="Access.Summary" xml:space="preserve">
    <value>Changes the access level prileges for a command.</value>
  </data>
  <data name="Access.Usage" xml:space="preserve">
    <value>access [command] (Range 0 through 100)
access [command] default
&lt;b&gt;Example:&lt;/b&gt; !access ping 0
&lt;b&gt;Example:&lt;/b&gt; !access ping 100</value>
  </data>
  <data name="Autojoin.Summary" xml:space="preserve">
    <value>Adds or removes a chatroom from the auto join list.</value>
  </data>
  <data name="Autojoin.Usage" xml:space="preserve">
    <value>autojoin add [room]
autojoin remove [room]
autojoin list</value>
  </data>
  <data name="Chats.Summary" xml:space="preserve">
    <value>The chat rooms that the bot is currently signed into.</value>
  </data>
  <data name="Chats.Usage" xml:space="preserve">
    <value>chats</value>
  </data>
  <data name="Commands.Summary" xml:space="preserve">
    <value>List of available commands and their access levels.</value>
  </data>
  <data name="Commands.Usage" xml:space="preserve">
    <value>commands - list of commands you have access to
commands all - list all commands
commands details - list all commands and show modules</value>
  </data>
  <data name="Credits.Summary" xml:space="preserve">
    <value>Displays credits.</value>
  </data>
  <data name="Credits.Usage" xml:space="preserve">
    <value>credits</value>
  </data>
  <data name="CTrig.Summary" xml:space="preserve">
    <value>Temporarily change the bot's trigger.</value>
  </data>
  <data name="CTrig.Usage" xml:space="preserve">
    <value>ctrig [trigger]
&lt;b&gt;Example:&lt;/b&gt; !ctrig #</value>
  </data>
  <data name="Help.Summary" xml:space="preserve">
    <value>Displays help information about a particular command.</value>
  </data>
  <data name="Help.Usage" xml:space="preserve">
    <value>help [command]</value>
  </data>
  <data name="Join.Summary" xml:space="preserve">
    <value>Makes the bot join the provided chatroom.</value>
  </data>
  <data name="Join.Usage" xml:space="preserve">
    <value>join [room]</value>
  </data>
  <data name="Kick.Summary" xml:space="preserve">
    <value>Kicks a user from a chatroom.</value>
  </data>
  <data name="Kick.Usage" xml:space="preserve">
    <value>kick (room) [user]
&lt;b&gt;Example:&lt;/b&gt; !kick botdom devartuser</value>
  </data>
  <data name="List.Summary" xml:space="preserve">
    <value>List the users in a chatroom.</value>
  </data>
  <data name="List.Usage" xml:space="preserve">
    <value>list [room]</value>
  </data>
  <data name="Part.Summary" xml:space="preserve">
    <value>Makes the bot leave the provided chatroom.</value>
  </data>
  <data name="Part.Usage" xml:space="preserve">
    <value>part [room]</value>
  </data>
  <data name="Ping.Summary" xml:space="preserve">
    <value>Ping the bot to find out how much lag it has.</value>
  </data>
  <data name="Ping.Usage" xml:space="preserve">
    <value>ping</value>
  </data>
  <data name="Plugins.Summary" xml:space="preserve">
    <value>Allows you to view plugin info, reload plugins, and turn plugins on or off.</value>
  </data>
  <data name="Plugins.Usage" xml:space="preserve">
    <value>plugins list - list all plugins loaded
plugins reload - reload plugins
plugins [plugin key] info - plugin information
plugins [plugin key] turn [on or off] - turn plugin on or off
plugins all turn [on or off] - turn all plugins on or off at once
&lt;b&gt;Exmaple:&lt;/b&gt; !plugins system info</value>
  </data>
  <data name="Priv.Summary" xml:space="preserve">
    <value>Manage bot priv class access levels.</value>
  </data>
  <data name="Priv.Usage" xml:space="preserve">
    <value>priv [priv class] [level]
&lt;b&gt;Example:&lt;/b&gt; !priv guest 1</value>
  </data>
  <data name="Quit.Summary" xml:space="preserve">
    <value>Shutdown the bot.</value>
  </data>
  <data name="Quit.Usage" xml:space="preserve">
    <value>quit</value>
  </data>
  <data name="Restart.Summary" xml:space="preserve">
    <value>Restarts the bot.</value>
  </data>
  <data name="Restart.Usage" xml:space="preserve">
    <value>restart</value>
  </data>
  <data name="Say.Summary" xml:space="preserve">
    <value>Have the bot say stuff.</value>
  </data>
  <data name="Say.Usage" xml:space="preserve">
    <value>say (#room) [message]
&lt;b&gt;Example:&lt;/b&gt; !say #botdom Hi</value>
  </data>
  <data name="Time.Summary" xml:space="preserve">
    <value>Displays the current bot time.</value>
  </data>
  <data name="Time.Usage" xml:space="preserve">
    <value>time</value>
  </data>
  <data name="User.Summary" xml:space="preserve">
    <value>Manage users registered to the bot.</value>
  </data>
  <data name="User.Usage" xml:space="preserve">
    <value>add [user] [level]
edit [user] [level]
list
del [user]
addprivclass [name] [level]
delprivclass [name]
&lt;b&gt;Example:&lt;/b&gt; !user add devartuser 50</value>
  </data>
  <data name="TrigCheck.Summary" xml:space="preserve">
    <value>Displays the trigger for the bot.</value>
  </data>
  <data name="TrigCheck.Usage" xml:space="preserve">
    <value>trigcheck</value>
  </data>
</root>